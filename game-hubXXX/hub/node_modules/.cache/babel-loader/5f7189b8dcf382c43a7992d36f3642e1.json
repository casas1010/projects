{"ast":null,"code":"var _jsxFileName = \"/Users/juancasas/github/projects/game-hub/src/games/Simon.js\";\nimport React from 'react';\nimport './Simon.css';\nimport $ from 'jquery';\nimport ScoreBoard from '../components/ScoreBoard';\n\nclass Simon extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.makeRandomNumber = () => {\n      return Math.floor(Math.random() * 4);\n    };\n\n    this.reset = () => {\n      this.setState({\n        playing: false,\n        memoryArray: [],\n        playersArray: []\n      });\n    };\n\n    this.start = () => {\n      // reset colors\n      $(`#0`).css('background-color', 'red');\n      $(`#1`).css('background-color', 'blue');\n      $(`#2`).css('background-color', 'green');\n      $(`#3`).css('background-color', 'yellow');\n      $('#background').css('background-color', 'whitesmoke');\n      $('#playButton').css('background-color', 'darkblue');\n      $('#gameContainer').css('background-color', 'teal'); //change properties\n\n      $('#playButton').text('Reset');\n      this.reset();\n      this.setState({\n        playing: true\n      });\n      this.robbotClick();\n    };\n\n    this.gameOver = () => {\n      this.setState({\n        playing: false\n      });\n      setTimeout(() => {\n        [0, 1, 2, 3].map((id, index) => {\n          setTimeout(() => {\n            $(`#${id}`).css('background-color', 'black');\n          }, 1000 * index);\n        });\n      }, 1000);\n      setTimeout(() => {\n        $('#gameContainer').css('background-color', 'black');\n      }, 5000);\n      setTimeout(() => {\n        $('#background').css('background-color', 'black');\n        $('#playButton').css('background-color', 'black');\n      }, 6000);\n    };\n\n    this.buttonClick = eve => {\n      if (this.state.playing) {\n        // flash cell selected\n        let oricolor = $(`#${eve.target.id}`).css('background-color');\n        $(`#${eve.target.id}`).css('background-color', 'grey');\n        {\n          let eve2 = eve.target.id;\n          setTimeout(() => {\n            this.setState({\n              playPause: false\n            });\n            $(`#${eve2}`).css('background-color', oricolor);\n          }, 250);\n        } // add cell to player array\n\n        this.setState({\n          playerArray: [...this.state.playerArray, eve.target.id]\n        }); // check win      NOTE: I was unable to create a check win function at the time\n\n        let playerArray = [...this.state.playerArray, eve.target.id];\n        let playerArrayLength = playerArray.length;\n        let memoryArray = this.state.memoryArray;\n        let memoryArrayLenght = memoryArray.length;\n\n        for (let i = 0; i < playerArrayLength; i++) {\n          if (playerArray[i] != memoryArray[i]) {\n            console.log('WRONG');\n            this.gameOver();\n          } else if (playerArray[i] == memoryArray[i]) {\n            console.log('CORRECT');\n          }\n\n          if (playerArrayLength == memoryArrayLenght) {\n            setTimeout(() => {\n              this.robbotClick();\n            }, 500);\n            console.log('all correct!');\n            break;\n          }\n        }\n      }\n    };\n\n    this.state = {\n      memoryArray: [],\n      playerArray: [],\n      playersTurn: 'Machine',\n      playing: false,\n      activePlayer: null\n    };\n  }\n\n  componentDidMount(props) {\n    console.log(props);\n  }\n\n  changePlayer() {\n    if (this.state.playersTurn == 'Machine') {\n      this.setState({\n        playersTurn: 'Human'\n      });\n    } else {\n      this.setState({\n        playersTurn: 'Machine'\n      });\n    }\n  }\n\n  // computers click\n  robbotClick() {\n    this.setState({\n      playing: false,\n      playerArray: []\n    });\n    this.state.memoryArray.map((id, index) => {\n      setTimeout(() => {\n        let oricolor = $(`#${id}`).css('background-color');\n        $(`#${id}`).css('background-color', 'grey');\n        {\n          let eve2 = id;\n          setTimeout(() => {\n            $(`#${eve2}`).css('background-color', oricolor);\n          }, 250);\n        }\n      }, 1000 * index);\n    }); //show user new click cells\n\n    setTimeout(() => {\n      let randomIdNumber = this.makeRandomNumber();\n      let oricolor = $(`#${randomIdNumber}`).css('background-color');\n      $(`#${randomIdNumber}`).css('background-color', 'grey');\n      {\n        let eve2 = randomIdNumber;\n        setTimeout(() => {\n          $(`#${eve2}`).css('background-color', oricolor);\n        }, 250);\n      } //input new click cell into array\n\n      this.setState({\n        memoryArray: [...this.state.memoryArray, randomIdNumber]\n      });\n      this.changePlayer();\n      this.setState({\n        playing: true\n      });\n    }, this.state.memoryArray.length * 1000);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"background\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"scoreAndGameContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"gameContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"0\",\n      onClick: this.buttonClick,\n      className: \"red button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"1\",\n      onClick: this.buttonClick,\n      className: \"blue button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"2\",\n      onClick: this.buttonClick,\n      className: \"green button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"3\",\n      onClick: this.buttonClick,\n      className: \"yellow button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"playButton\",\n      className: \"ui command grey button\",\n      onClick: this.start,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 25\n      }\n    }, \"Start\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"gameInfo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      id: \"level\",\n      className: \"ui command\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 29\n      }\n    }, `Level: ${this.state.memoryArray.length}`)), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(ScoreBoard, {\n      fun: this.props,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\n;\nexport default Simon;","map":{"version":3,"sources":["/Users/juancasas/github/projects/game-hub/src/games/Simon.js"],"names":["React","$","ScoreBoard","Simon","Component","constructor","props","makeRandomNumber","Math","floor","random","reset","setState","playing","memoryArray","playersArray","start","css","text","robbotClick","gameOver","setTimeout","map","id","index","buttonClick","eve","state","oricolor","target","eve2","playPause","playerArray","playerArrayLength","length","memoryArrayLenght","i","console","log","playersTurn","activePlayer","componentDidMount","changePlayer","randomIdNumber","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,aAAP;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,OAAOC,UAAP,MAAuB,0BAAvB;;AAGA,MAAMC,KAAN,SAAoBH,KAAK,CAACI,SAA1B,CAAoC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAgBnBC,gBAhBmB,GAgBA,MAAM;AACrB,aAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAP;AACH,KAlBkB;;AAAA,SAmBnBC,KAnBmB,GAmBX,MAAM;AACV,WAAKC,QAAL,CAAc;AACVC,QAAAA,OAAO,EAAE,KADC;AAEVC,QAAAA,WAAW,EAAE,EAFH;AAGVC,QAAAA,YAAY,EAAE;AAHJ,OAAd;AAKH,KAzBkB;;AAAA,SA2BnBC,KA3BmB,GA2BX,MAAM;AACV;AACAf,MAAAA,CAAC,CAAE,IAAF,CAAD,CAAQgB,GAAR,CAAY,kBAAZ,EAAgC,KAAhC;AACAhB,MAAAA,CAAC,CAAE,IAAF,CAAD,CAAQgB,GAAR,CAAY,kBAAZ,EAAgC,MAAhC;AACAhB,MAAAA,CAAC,CAAE,IAAF,CAAD,CAAQgB,GAAR,CAAY,kBAAZ,EAAgC,OAAhC;AACAhB,MAAAA,CAAC,CAAE,IAAF,CAAD,CAAQgB,GAAR,CAAY,kBAAZ,EAAgC,QAAhC;AACAhB,MAAAA,CAAC,CAAC,aAAD,CAAD,CAAiBgB,GAAjB,CAAqB,kBAArB,EAAyC,YAAzC;AACAhB,MAAAA,CAAC,CAAC,aAAD,CAAD,CAAiBgB,GAAjB,CAAqB,kBAArB,EAAyC,UAAzC;AACAhB,MAAAA,CAAC,CAAC,gBAAD,CAAD,CAAoBgB,GAApB,CAAwB,kBAAxB,EAA4C,MAA5C,EARU,CAUV;;AACAhB,MAAAA,CAAC,CAAC,aAAD,CAAD,CAAiBiB,IAAjB,CAAsB,OAAtB;AACA,WAAKP,KAAL;AACA,WAAKC,QAAL,CAAc;AACVC,QAAAA,OAAO,EAAE;AADC,OAAd;AAIA,WAAKM,WAAL;AACH,KA7CkB;;AAAA,SAwDnBC,QAxDmB,GAwDR,MAAM;AACb,WAAKR,QAAL,CAAc;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAd;AACAQ,MAAAA,UAAU,CAAC,MAAM;AACb,SAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAaC,GAAb,CAAiB,CAACC,EAAD,EAAKC,KAAL,KAAe;AAC5BH,UAAAA,UAAU,CAAC,MAAM;AACbpB,YAAAA,CAAC,CAAE,IAAGsB,EAAG,EAAR,CAAD,CAAYN,GAAZ,CAAgB,kBAAhB,EAAoC,OAApC;AACH,WAFS,EAEP,OAAOO,KAFA,CAAV;AAGH,SAJD;AAKH,OANS,EAMP,IANO,CAAV;AAQAH,MAAAA,UAAU,CAAC,MAAM;AACbpB,QAAAA,CAAC,CAAC,gBAAD,CAAD,CAAoBgB,GAApB,CAAwB,kBAAxB,EAA4C,OAA5C;AACH,OAFS,EAEP,IAFO,CAAV;AAIAI,MAAAA,UAAU,CAAC,MAAM;AACbpB,QAAAA,CAAC,CAAC,aAAD,CAAD,CAAiBgB,GAAjB,CAAqB,kBAArB,EAAyC,OAAzC;AACAhB,QAAAA,CAAC,CAAC,aAAD,CAAD,CAAiBgB,GAAjB,CAAqB,kBAArB,EAAyC,OAAzC;AACH,OAHS,EAGP,IAHO,CAAV;AAIH,KA1EkB;;AAAA,SAqHnBQ,WArHmB,GAqHJC,GAAD,IAAS;AACnB,UAAI,KAAKC,KAAL,CAAWd,OAAf,EAAwB;AAEpB;AACA,YAAIe,QAAQ,GAAG3B,CAAC,CAAE,IAAGyB,GAAG,CAACG,MAAJ,CAAWN,EAAG,EAAnB,CAAD,CAAuBN,GAAvB,CAA2B,kBAA3B,CAAf;AACAhB,QAAAA,CAAC,CAAE,IAAGyB,GAAG,CAACG,MAAJ,CAAWN,EAAG,EAAnB,CAAD,CAAuBN,GAAvB,CAA2B,kBAA3B,EAA+C,MAA/C;AACA;AACI,cAAIa,IAAI,GAAGJ,GAAG,CAACG,MAAJ,CAAWN,EAAtB;AACAF,UAAAA,UAAU,CACN,MAAM;AACF,iBAAKT,QAAL,CAAc;AAAEmB,cAAAA,SAAS,EAAE;AAAb,aAAd;AACA9B,YAAAA,CAAC,CAAE,IAAG6B,IAAK,EAAV,CAAD,CAAcb,GAAd,CAAkB,kBAAlB,EAAsCW,QAAtC;AACH,WAJK,EAIH,GAJG,CAAV;AAMH,SAbmB,CAcpB;;AACA,aAAKhB,QAAL,CAAc;AAAEoB,UAAAA,WAAW,EAAE,CAAC,GAAG,KAAKL,KAAL,CAAWK,WAAf,EAA4BN,GAAG,CAACG,MAAJ,CAAWN,EAAvC;AAAf,SAAd,EAfoB,CAiBpB;;AACA,YAAIS,WAAW,GAAG,CAAC,GAAG,KAAKL,KAAL,CAAWK,WAAf,EAA4BN,GAAG,CAACG,MAAJ,CAAWN,EAAvC,CAAlB;AACA,YAAIU,iBAAiB,GAAGD,WAAW,CAACE,MAApC;AACA,YAAIpB,WAAW,GAAG,KAAKa,KAAL,CAAWb,WAA7B;AACA,YAAIqB,iBAAiB,GAAGrB,WAAW,CAACoB,MAApC;;AACA,aAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,iBAApB,EAAuCG,CAAC,EAAxC,EAA4C;AACxC,cAAIJ,WAAW,CAACI,CAAD,CAAX,IAAkBtB,WAAW,CAACsB,CAAD,CAAjC,EAAsC;AAClCC,YAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,iBAAKlB,QAAL;AACH,WAHD,MAIK,IAAIY,WAAW,CAACI,CAAD,CAAX,IAAkBtB,WAAW,CAACsB,CAAD,CAAjC,EAAsC;AACvCC,YAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACH;;AACD,cAAIL,iBAAiB,IAAIE,iBAAzB,EAA4C;AACxCd,YAAAA,UAAU,CACN,MAAM;AAAE,mBAAKF,WAAL;AAAoB,aADtB,EACwB,GADxB,CAAV;AAGAkB,YAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA;AAEH;AACJ;AACJ;AACJ,KA9JkB;;AAEf,SAAKX,KAAL,GAAa;AACTb,MAAAA,WAAW,EAAE,EADJ;AAETkB,MAAAA,WAAW,EAAE,EAFJ;AAGTO,MAAAA,WAAW,EAAE,SAHJ;AAIT1B,MAAAA,OAAO,EAAE,KAJA;AAKT2B,MAAAA,YAAY,EAAC;AALJ,KAAb;AAQH;;AAEDC,EAAAA,iBAAiB,CAACnC,KAAD,EAAO;AACpB+B,IAAAA,OAAO,CAACC,GAAR,CAAYhC,KAAZ;AACH;;AAiCDoC,EAAAA,YAAY,GAAG;AACX,QAAI,KAAKf,KAAL,CAAWY,WAAX,IAA0B,SAA9B,EAAyC;AACrC,WAAK3B,QAAL,CAAc;AAAE2B,QAAAA,WAAW,EAAE;AAAf,OAAd;AACH,KAFD,MAGK;AACD,WAAK3B,QAAL,CAAc;AAAE2B,QAAAA,WAAW,EAAE;AAAf,OAAd;AACH;AACJ;;AAuBD;AACApB,EAAAA,WAAW,GAAG;AACV,SAAKP,QAAL,CAAc;AACVC,MAAAA,OAAO,EAAE,KADC;AAEVmB,MAAAA,WAAW,EAAE;AAFH,KAAd;AAIA,SAAKL,KAAL,CAAWb,WAAX,CAAuBQ,GAAvB,CAA2B,CAACC,EAAD,EAAKC,KAAL,KAAe;AACtCH,MAAAA,UAAU,CAAC,MAAM;AACb,YAAIO,QAAQ,GAAG3B,CAAC,CAAE,IAAGsB,EAAG,EAAR,CAAD,CAAYN,GAAZ,CAAgB,kBAAhB,CAAf;AACAhB,QAAAA,CAAC,CAAE,IAAGsB,EAAG,EAAR,CAAD,CAAYN,GAAZ,CAAgB,kBAAhB,EAAoC,MAApC;AACA;AACI,cAAIa,IAAI,GAAGP,EAAX;AACAF,UAAAA,UAAU,CACN,MAAM;AACFpB,YAAAA,CAAC,CAAE,IAAG6B,IAAK,EAAV,CAAD,CAAcb,GAAd,CAAkB,kBAAlB,EAAsCW,QAAtC;AAEH,WAJK,EAIH,GAJG,CAAV;AAMH;AACJ,OAZS,EAYP,OAAOJ,KAZA,CAAV;AAaH,KAdD,EALU,CAqBV;;AACAH,IAAAA,UAAU,CAAC,MAAM;AACb,UAAIsB,cAAc,GAAG,KAAKpC,gBAAL,EAArB;AACA,UAAIqB,QAAQ,GAAG3B,CAAC,CAAE,IAAG0C,cAAe,EAApB,CAAD,CAAwB1B,GAAxB,CAA4B,kBAA5B,CAAf;AACAhB,MAAAA,CAAC,CAAE,IAAG0C,cAAe,EAApB,CAAD,CAAwB1B,GAAxB,CAA4B,kBAA5B,EAAgD,MAAhD;AACA;AACI,YAAIa,IAAI,GAAGa,cAAX;AACAtB,QAAAA,UAAU,CACN,MAAM;AAAEpB,UAAAA,CAAC,CAAE,IAAG6B,IAAK,EAAV,CAAD,CAAcb,GAAd,CAAkB,kBAAlB,EAAsCW,QAAtC;AAAkD,SADpD,EACsD,GADtD,CAAV;AAGH,OATY,CAUb;;AACA,WAAKhB,QAAL,CAAc;AAAEE,QAAAA,WAAW,EAAE,CAAC,GAAG,KAAKa,KAAL,CAAWb,WAAf,EAA4B6B,cAA5B;AAAf,OAAd;AACA,WAAKD,YAAL;AACA,WAAK9B,QAAL,CAAc;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAd;AACH,KAdS,EAcP,KAAKc,KAAL,CAAWb,WAAX,CAAuBoB,MAAvB,GAAgC,IAdzB,CAAV;AAeH;;AA6CDU,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,EAAE,EAAC,YAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,EAAE,EAAC,eAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,EAAE,EAAC,GAAR;AAAY,MAAA,OAAO,EAAE,KAAKnB,WAA1B;AAAuC,MAAA,SAAS,EAAC,YAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI;AAAK,MAAA,EAAE,EAAC,GAAR;AAAY,MAAA,OAAO,EAAE,KAAKA,WAA1B;AAAuC,MAAA,SAAS,EAAC,aAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,eAII;AAAK,MAAA,EAAE,EAAC,GAAR;AAAY,MAAA,OAAO,EAAE,KAAKA,WAA1B;AAAuC,MAAA,SAAS,EAAC,cAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,eAKI;AAAK,MAAA,EAAE,EAAC,GAAR;AAAY,MAAA,OAAO,EAAE,KAAKA,WAA1B;AAAuC,MAAA,SAAS,EAAC,eAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,eAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPJ,eAQI;AAAQ,MAAA,EAAE,EAAC,YAAX;AAAwB,MAAA,SAAS,EAAC,wBAAlC;AAA2D,MAAA,OAAO,EAAE,KAAKT,KAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eARJ,eASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATJ,eAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVJ,eAWI;AAAK,MAAA,EAAE,EAAC,UAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,EAAE,EAAC,OAAP;AAAe,MAAA,SAAS,EAAC,YAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAwC,UAAS,KAAKW,KAAL,CAAWb,WAAX,CAAuBoB,MAAO,EAA/E,CADJ,CAXJ,eAcI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdJ,CADJ,eAiBI,oBAAC,UAAD;AAAY,MAAA,GAAG,EAAE,KAAK5B,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjBJ,CADJ,CADJ;AAuBH;;AAzL+B;;AA0LnC;AAGD,eAAeH,KAAf","sourcesContent":["import React from 'react';\nimport './Simon.css';\nimport $ from 'jquery';\n\nimport ScoreBoard from '../components/ScoreBoard';\n\n\nclass Simon extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            memoryArray: [],\n            playerArray: [],\n            playersTurn: 'Machine',\n            playing: false,\n            activePlayer:null\n\n        }\n    }\n\n    componentDidMount(props){\n        console.log(props);\n    }\n\n    makeRandomNumber = () => {\n        return Math.floor(Math.random() * 4);\n    }\n    reset = () => {\n        this.setState({\n            playing: false,\n            memoryArray: [],\n            playersArray: []\n        })\n    }\n\n    start = () => {\n        // reset colors\n        $(`#0`).css('background-color', 'red');\n        $(`#1`).css('background-color', 'blue');\n        $(`#2`).css('background-color', 'green');\n        $(`#3`).css('background-color', 'yellow');\n        $('#background').css('background-color', 'whitesmoke');\n        $('#playButton').css('background-color', 'darkblue');\n        $('#gameContainer').css('background-color', 'teal');\n\n        //change properties\n        $('#playButton').text('Reset')\n        this.reset();\n        this.setState({\n            playing: true\n        });\n\n        this.robbotClick();\n    }\n\n    changePlayer() {\n        if (this.state.playersTurn == 'Machine') {\n            this.setState({ playersTurn: 'Human' })\n        }\n        else {\n            this.setState({ playersTurn: 'Machine' })\n        }\n    }\n\n    gameOver = () => {\n        this.setState({ playing: false });\n        setTimeout(() => {\n            [0, 1, 2, 3].map((id, index) => {\n                setTimeout(() => {\n                    $(`#${id}`).css('background-color', 'black');\n                }, 1000 * index);\n            })\n        }, 1000);\n\n        setTimeout(() => {\n            $('#gameContainer').css('background-color', 'black');\n        }, 5000);\n\n        setTimeout(() => {\n            $('#background').css('background-color', 'black');\n            $('#playButton').css('background-color', 'black');\n        }, 6000);\n    }\n\n\n    // computers click\n    robbotClick() {\n        this.setState({\n            playing: false,\n            playerArray: []\n        });\n        this.state.memoryArray.map((id, index) => {\n            setTimeout(() => {\n                let oricolor = $(`#${id}`).css('background-color');\n                $(`#${id}`).css('background-color', 'grey');\n                {\n                    let eve2 = id;\n                    setTimeout(\n                        () => {\n                            $(`#${eve2}`).css('background-color', oricolor);\n\n                        }, 250\n                    )\n                }\n            }, 1000 * index)\n        });\n\n        //show user new click cells\n        setTimeout(() => {\n            let randomIdNumber = this.makeRandomNumber();\n            let oricolor = $(`#${randomIdNumber}`).css('background-color');\n            $(`#${randomIdNumber}`).css('background-color', 'grey');\n            {\n                let eve2 = randomIdNumber;\n                setTimeout(\n                    () => { $(`#${eve2}`).css('background-color', oricolor); }, 250\n                )\n            }\n            //input new click cell into array\n            this.setState({ memoryArray: [...this.state.memoryArray, randomIdNumber] });\n            this.changePlayer();\n            this.setState({ playing: true });\n        }, this.state.memoryArray.length * 1000);\n    }\n\n    buttonClick = (eve) => {\n        if (this.state.playing) {\n\n            // flash cell selected\n            let oricolor = $(`#${eve.target.id}`).css('background-color');\n            $(`#${eve.target.id}`).css('background-color', 'grey');\n            {\n                let eve2 = eve.target.id;\n                setTimeout(\n                    () => {\n                        this.setState({ playPause: false });\n                        $(`#${eve2}`).css('background-color', oricolor);\n                    }, 250\n                )\n            }\n            // add cell to player array\n            this.setState({ playerArray: [...this.state.playerArray, eve.target.id] })\n\n            // check win      NOTE: I was unable to create a check win function at the time\n            let playerArray = [...this.state.playerArray, eve.target.id]\n            let playerArrayLength = playerArray.length;\n            let memoryArray = this.state.memoryArray;\n            let memoryArrayLenght = memoryArray.length;\n            for (let i = 0; i < playerArrayLength; i++) {\n                if (playerArray[i] != memoryArray[i]) {\n                    console.log('WRONG')\n                    this.gameOver();\n                }\n                else if (playerArray[i] == memoryArray[i]) {\n                    console.log('CORRECT')\n                }\n                if (playerArrayLength == memoryArrayLenght) {\n                    setTimeout(\n                        () => { this.robbotClick() }, 500\n                    )\n                    console.log('all correct!');\n                    break;\n\n                }\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div id='background'>\n                <div className='scoreAndGameContainer'>\n                    <div id='gameContainer'>\n                        <div id='0' onClick={this.buttonClick} className='red button'></div>\n                        <div id='1' onClick={this.buttonClick} className='blue button'></div>\n                        <br />\n                        <div id='2' onClick={this.buttonClick} className='green button'></div>\n                        <div id='3' onClick={this.buttonClick} className='yellow button'></div>\n                        <br />\n                        <br />\n                        <button id='playButton' className='ui command grey button' onClick={this.start}>Start</button>\n                        <br />\n                        <br />\n                        <div id='gameInfo'>\n                            <h3 id='level' className='ui command'>{`Level: ${this.state.memoryArray.length}`}</h3>\n                        </div>\n                        <br />\n                    </div>\n                    <ScoreBoard fun={this.props} />\n                </div>\n            </div>\n        );\n    }\n};\n\n\nexport default Simon;\n\n"]},"metadata":{},"sourceType":"module"}